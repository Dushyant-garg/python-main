name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=test-api-key" >> $GITHUB_ENV
        echo "OPENAI_MODEL=gpt-4" >> $GITHUB_ENV
        echo "DATABASE_URL=sqlite:///test.db" >> $GITHUB_ENV
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 app/ --count --max-line-length=120 --statistics --exit-zero
        flake8 tests/ --count --max-line-length=120 --statistics --exit-zero
    
    - name: Run unit tests
      run: |
        python -m pytest tests/ -m unit -v --tb=short
    
    - name: Run agent tests
      run: |
        python -m pytest tests/ -m agent -v --tb=short
    
    - name: Run API tests
      run: |
        python -m pytest tests/ -m api -v --tb=short
    
    - name: Run integration tests
      run: |
        python -m pytest tests/ -m integration -v --tb=short
    
    - name: Run all tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=term-missing --cov-fail-under=70 -v
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  performance-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
    
    - name: Set up environment variables
      run: |
        echo "OPENAI_API_KEY=test-api-key" >> $GITHUB_ENV
        echo "OPENAI_MODEL=gpt-4" >> $GITHUB_ENV
    
    - name: Run performance tests
      run: |
        python -m pytest tests/ -m performance -v --tb=short
      continue-on-error: true

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -r requirements.txt
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run bandit security scan
      run: |
        bandit -r app/ -f json -o bandit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json

  docs-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pydoc-markdown
    
    - name: Test API documentation
      run: |
        python -c "
        from app.main import app
        from fastapi.openapi.utils import get_openapi
        
        openapi_schema = get_openapi(
            title='Requirements Analyzer API',
            version='1.0.0',
            description='API for analyzing project documents and generating Software Requirements Documents',
            routes=app.routes,
        )
        
        print('‚úÖ OpenAPI schema generated successfully')
        print(f'üìä Found {len(openapi_schema[\"paths\"])} API endpoints')
        "
    
    - name: Check README and documentation
      run: |
        python -c "
        import os
        from pathlib import Path
        
        # Check for required documentation files
        required_files = ['README.md', 'requirements.txt', 'requirements-test.txt']
        
        for file in required_files:
            if Path(file).exists():
                print(f'‚úÖ Found {file}')
            else:
                print(f'‚ùå Missing {file}')
                exit(1)
        
        # Check README content
        readme = Path('README.md').read_text()
        required_sections = ['Features', 'Installation', 'Usage', 'API Endpoints']
        
        for section in required_sections:
            if section in readme:
                print(f'‚úÖ README contains {section} section')
            else:
                print(f'‚ö†Ô∏è README missing {section} section')
        "

  compatibility-test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Test basic imports
      run: |
        python -c "
        try:
            from app.main import app
            from app.agents.requirement_analyzer import RequirementAnalyzer
            from app.agents.backend_code_generator import BackendCodeGenerator
            from app.agents.frontend_code_generator import FrontendCodeGenerator
            from app.agents.integration_coordinator import IntegrationCoordinator
            print('‚úÖ All imports successful on ${{ matrix.os }} with Python ${{ matrix.python-version }}')
        except Exception as e:
            print(f'‚ùå Import failed: {e}')
            exit(1)
        "